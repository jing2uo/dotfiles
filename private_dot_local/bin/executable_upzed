#!/bin/bash

# 如果任何命令执行失败，则立即退出脚本
set -e

echo "正在检查 Zed 更新..."

# 1. 获取本地版本
# 检查 zed 命令是否存在
if ! command -v zed &>/dev/null; then
  # 如果 zed 不存在，我们将本地版本设置为一个很低的值，以触发首次安装
  LOCAL_VERSION="0.0.0"
  echo "未检测到本地 Zed 版本，将进行安装。"
else
  # 使用您提供的命令获取本地版本号
  LOCAL_VERSION=$(zed -v | awk '{print $2}')
fi

echo "本地版本: $LOCAL_VERSION"

# 2. 从 GitHub API 获取最新版本
REMOTE_TAG=$(curl -s https://api.github.com/repos/zed-industries/zed/releases/latest | jq -r '.tag_name')
if [ -z "$REMOTE_TAG" ]; then
  echo "错误：无法从 GitHub API 获取最新版本号。"
  exit 1
fi
# 移除版本号前面的 'v'，以便于比较
REMOTE_VERSION=${REMOTE_TAG#v}

echo "最新版本: $REMOTE_VERSION"

# 3. 比较版本号
# 使用 sort -V 进行版本号排序，并取最后一个（即最新的）
LATEST_VERSION=$(printf "%s\n%s" "$LOCAL_VERSION" "$REMOTE_VERSION" | sort -V | tail -n1)

# 如果最新版本号就是本地的版本号，说明无需更新
if [ "$LATEST_VERSION" == "$LOCAL_VERSION" ]; then
  echo "您已安装最新版本的 Zed，无需更新。"
  exit 0
fi

# 4. 如果代码执行到这里，说明需要更新
echo "发现新版本，准备从 $LOCAL_VERSION 更新到 $REMOTE_VERSION..."

# 定义下载和安装路径的变量
DOWNLOAD_URL="https://zed.dev/api/releases/stable/latest/zed-linux-x86_64.tar.gz"
TMP_ARCHIVE="/tmp/zed.tar.gz"
INSTALL_DIR="/opt"

# --- 开始执行更新流程 ---

echo "开始从 $DOWNLOAD_URL 下载..."

# 清理 /tmp 目录下可能存在的旧文件
# 使用 sudo 是为了确保权限足够，即使这些文件是之前由 root 创建的
sudo rm -rf /tmp/zed*

# 使用您原来的下载命令
proxychains axel "$DOWNLOAD_URL" -o "$TMP_ARCHIVE"

echo "下载完成，正在解压..."
# 解压到 /tmp 目录
tar xf "$TMP_ARCHIVE" -C /tmp/

echo "正在安装新版本..."
# 使用 sudo 来替换 /opt 目录下的旧应用
sudo rm -rf "$INSTALL_DIR/zed.app/"
sudo mv /tmp/zed.app/ "$INSTALL_DIR/"

echo "清理临时文件..."
# 使用 sudo 来删除由 root 用户（通过上一个 tar 命令，如果以 sudo 运行）或当前用户创建的压缩包
sudo rm -f "$TMP_ARCHIVE"

echo "Zed 已成功更新到版本 $REMOTE_VERSION！"
# 显示更新后的版本号以供确认
zed -v
