function myfpath() {
  if [ -z "$MYFPATH" ]; then
    export MYFPATH=$HOME/completions && mkdir -p $MYFPATH
  fi
  helm completion zsh >$MYFPATH/_helm
  kubectl completion zsh >$MYFPATH/_kubectl
  zellij setup --generate-completion zsh >$MYFPATH/_zellij
  ov --completion zsh >$MYFPATH/_ov
  echo "now"
  ls -l $MYFPATH/
}

alias yaml2json="python3 -c 'import json, sys, yaml;from yaml import CSafeLoader as sl; y=yaml.load(sys.stdin.read(), Loader=sl) ; json.dump(y, sys.stdout)'"

function _deletemydotfiles() {
  param1=$1
  param2=$2

  if [[ "$param1" == "-yes" && "$param2" == "-yes" ]]; then
    rm -rf $(chezmoi managed)
    rm -rf $HOME/.config/zim/
    rm -rf $HOME/.local/share/chezmoi
  else
    echo "use: _deletemydotfiles -yes -yes to delete"
  fi
}

function prettier-vscode-extensions-json() {
  jq . ~/.vscode/extensions/extensions.json >/tmp/vse.json
  mv /tmp/vse.json ~/.vscode/extensions/extensions.json
}

function dcode() {
  echo "$1" | base64 -d
}

function ecode() {
  echo "$1" | base64
}

function x() {
  if [[ -f $1 ]]; then
    case $1 in
    *.deb)
      basename=$(basename "$1" .deb)
      dpkg-deb -x $1 $basename
      ;;
    *.tar.bz2) tar xvjf $1 ;;
    *.tar.gz) tar xvzf $1 ;;
    *.tar.xz) tar xvJf $1 ;;
    *.tar.lzma) tar --lzma -xvf $1 ;;
    *.bz2) bunzip $1 ;;
    *.rar) unrar $1 ;;
    *.gz) gunzip $1 ;;
    *.tar) tar xvf $1 ;;
    *.tbz2) tar xvjf $1 ;;
    *.tgz) tar xvzf $1 ;;
    *.zip) unzip $1 ;;
    *.Z) uncompress $1 ;;
    *.7z) 7z x $1 ;;
    *) echo "'$1' cannot be extracted via > x <" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function chroot2dir() {
  if [ -z "$1" ]; then
    echo "please input target directory, like /mnt"
    return 1
  fi

  DIR=$1

  if ! ls "$DIR" >/dev/null 2>&1; then
    echo "directory $DIR not found"
    return 1
  fi

  sudo mount -t proc /proc $DIR/proc
  sudo mount --rbind /dev $DIR/dev
  sudo mount --make-rslave $DIR/dev
  sudo mount --rbind /sys $DIR/sys
  sudo mount --make-rslave $DIR/sys
  sudo cp /etc/resolv.conf $DIR/etc/resolv.conf
  sudo chroot $DIR
}

function ccc() {
  sudo chmod a+x /usr/local/bin/* /opt/apps/*.appimage
  sudo chown -R root:root /usr/share/applications/opts /usr/local/bin /opt/apps
}

function upkernel() {
  if [ -z "$1" ]; then
    echo "please input vmlinuz path, like /boot/vmlinuz-5.10.0-18-amd64"
    return 1
  fi

  vmlinuz_path=$1

  if ! ls "$vmlinuz_path" >/dev/null 2>&1; then
    echo "vmlinuz $vmlinuz_path not found"
    return 1
  fi

  vmlinuz_version=$(echo $1 | sed 's%/boot/vmlinuz-%%g')
  sudo linux-update-symlinks install $vmlinuz_version $vmlinuz_path
  echo "now:"
  ls -lh / | grep -E 'vmlinuz|initrd'
}

function osback() {
  if [ -z "$1" ]; then
    echo "please input device name, like /dev/sdx"
    return 1
  fi

  DEV="$1"

  if ! ls "$DEV" >/dev/null 2>&1; then
    echo "device $DEV not found"
    return 1
  fi

  sudo mount "$DEV" /mnt/
  sudo btrfs subvolume delete /mnt/@osback
  sudo btrfs subvolume snapshot /mnt/@ /mnt/@osback
  echo "now:"
  sudo btrfs subvolume list /mnt
  sudo umount /mnt
}
