zstyle ':zim:zmodule' use 'degit'

ZIM_HOME=${HOME}/.config/zim
zstyle ':zim:completion' dumpfile "${ZIM_HOME}/zcompdump"
zstyle ':completion::complete:*' cache-path "${ZIM_HOME}/zcompcache"

if [[ ! -e ${ZIM_HOME}/zimfw.zsh ]]; then
  curl -fsSL --create-dirs -o ${ZIM_HOME}/zimfw.zsh \
    https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh
fi

if [[ ! ${ZIM_HOME}/init.zsh -nt ${ZDOTDIR:-${HOME}}/.zimrc ]]; then
  source ${ZIM_HOME}/zimfw.zsh init -q
fi

export ZIM_COMP=${ZIM_HOME}/completions
mkdir -p ${ZIM_COMP}
fpath=("${fpath[@]}"
  "/usr/share/zsh/site-functions/"
  "/usr/share/zsh/vendor-completions/"
  $ZIM_COMP
)

export WORDCHARS=${WORDCHARS/\//}
export PATH=${HOME}/.local/bin:$PATH

# zsh config
setopt globdots
bindkey -s '\e\e' '\C-asudo \C-e'
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word

# 检查 /etc/os-release 文件是否存在
if [[ -f /etc/os-release ]]; then
    source /etc/os-release
    case "$ID" in
        debian)
            # Debian 特定的配置
            autoload -U up-line-or-beginning-search
            zle -N up-line-or-beginning-search
            bindkey "${terminfo[kcuu1]}" up-line-or-beginning-search
            autoload -U down-line-or-beginning-search
            zle -N down-line-or-beginning-search
            bindkey "${terminfo[kcud1]}" down-line-or-beginning-search
            source /usr/share/doc/fzf/examples/key-bindings.zsh
            source /usr/share/doc/fzf/examples/completion.zsh
            ;;
        arch)
            # Arch 特定的配置
            autoload -U up-line-or-beginning-search
            zle -N up-line-or-beginning-search
            bindkey "^[[A" up-line-or-beginning-search
            autoload -U down-line-or-beginning-search
            zle -N down-line-or-beginning-search
            bindkey "^[[B" down-line-or-beginning-search
            source /usr/share/fzf/key-bindings.zsh
            source /usr/share/fzf/completion.zsh
            ;;
    esac
fi

# History config
export HISTSIZE=10000000
export SAVEHIST=10000000
export HISTFILE=${ZIM_HOME}/zsh_history

setopt append_history
setopt share_history
setopt hist_expire_dups_first
setopt hist_find_no_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt inc_append_history

alias curl="curl -k -s"
alias k="eza -lh"
alias kc="kubectl"
alias kx="kubectx"
alias kn="kubens"
alias yt='yt-dlp -f "bv*+ba" '
alias zz="zimfw clean && zimfw install && zimfw build -v"
alias typora="flatpak run io.typora.Typora $1"
# asdf-vm
if command -v asdf >/dev/null 2>&1; then
  export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
fi

# atuin, save history
if command -v atuin >/dev/null 2>&1; then
  export ATUIN_NOBIND="true"
  eval "$(atuin init zsh)"
fi

# starship
if command -v starship >/dev/null 2>&1; then
  eval "$(starship init zsh)"
else
  export PS1="%F{green}%n@%m:%~%F{reset} \$ "
fi

# direnv
if command -v direnv >/dev/null 2>&1; then
  eval "$(direnv hook zsh)"
fi

# podman
export PODMAN_COMPOSE_WARNING_LOGS=false

# init zim
source ${ZIM_HOME}/init.zsh
